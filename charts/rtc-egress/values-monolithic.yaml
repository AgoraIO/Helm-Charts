# Monolithic deployment - single service with all functionality
# Disables separated services and uses traditional single-container approach

architecture: "monolithic"

# Disable all separated services
apiServer:
  enabled: false
  server:
    region: ""
    taskTtl: 172800

egress:
  enabled: false
  server:
    region: ""
    workers: 4
    taskTtl: 172800
    workerPatterns:
      - "egress:snapshot:*"
      - "egress:record:*"
      - "egress:*:snapshot:*"
      - "egress:*:record:*"

flexibleRecorder:
  enabled: false
  server:
    region: ""
    workers: 1
    taskTtl: 172800
    workerPatterns:
      - "egress:web:*"
      - "egress:*:web:*"

uploader:
  enabled: false
  server:
    region: ""

webhookNotifier:
  enabled: false
  server:
    region: ""
  webhook:
    url: "http://localhost:9999/webhook"
    timeout: 30
    maxRetries: 5
    baseRetryInterval: 15
    maxRetryInterval: 300
    authToken: ""
    notifyStates:
      - "PROCESSING"
      - "STOPPED"
      - "FAILED"
      - "TIMEOUT"
    deliveredTtl: 172800
  server:
    region: ""

# Monolithic service configuration
monolithic:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress
    tag: "latest"
    pullPolicy: Always
  replicaCount: 3
  service:
    type: ClusterIP
    ports:
      api:
        port: 8080
        targetPort: 8080
        protocol: TCP
      health:
        port: 8182
        targetPort: 8182
        protocol: TCP
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Use legacy configuration patterns
replicaCount: 3
image:
  registry: ghcr.io
  repository: agoraio/rtc-egress
  tag: "latest"
  pullPolicy: Always

service:
  type: ClusterIP
  ports:
    api:
      port: 8080
      targetPort: 8080
      protocol: TCP
    health:
      port: 8182
      targetPort: 8182
      protocol: TCP

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Server configuration
server:
  ginMode: "release"
  apiPort: 8080
  healthPort: 8182
  logLevel: "info"

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "rtc-egress.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "rtc-egress.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "rtc-egress.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.ports.api.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "rtc-egress.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the health status:
{{- if contains "ClusterIP" .Values.service.type }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }} 8182:{{ .Values.service.ports.health.port }}
  curl http://localhost:8182/health
{{- else }}
  # Use the appropriate URL from step 1, but replace the port with {{ .Values.service.ports.health.port }}
{{- end }}

3. Access the web canvas interface:
{{- if contains "ClusterIP" .Values.service.type }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }} 3000:{{ .Values.service.ports.canvas.port }}
  open http://localhost:3000
{{- else }}
  # Use the appropriate URL from step 1, but replace the port with {{ .Values.service.ports.canvas.port }}
{{- end }}

4. Configuration:
   - Your Agora App ID: {{ .Values.agora.appId }}
   {{- if .Values.redis.external.enabled }}
   - Redis connection: {{ .Values.redis.external.host }}:{{ .Values.redis.external.port }}
   {{- end }}
   {{- if .Values.persistence.enabled }}
   - Recordings will be stored in: {{ .Values.persistence.recordings.mountPath }}
   - Snapshots will be stored in: {{ .Values.persistence.snapshots.mountPath }}
   {{- end }}

5. API Usage:
   Start a recording session:
   curl -X POST http://localhost:8080/egress/v1/task/start \
     -H "Content-Type: application/json" \
     -d '{
       "channelName": "your-channel",
       "accessToken": "your-token",
       "egressUid": "42",
       "layout": "flat"
     }'

   Stop a recording session:
   curl -X POST http://localhost:8080/egress/v1/task/stop \
     -H "Content-Type: application/json" \
     -d '{"taskId": "your-task-id"}'

6. Monitoring:
   Check pod status: kubectl get pods -n {{ .Release.Namespace }} -l {{ include "rtc-egress.selectorLabels" . }}
   View logs: kubectl logs -n {{ .Release.Namespace }} -l {{ include "rtc-egress.selectorLabels" . }} -f

{{- if not .Values.agora.appId }}

⚠️  WARNING: You need to configure your Agora App ID in values.yaml or via --set agora.appId=YOUR_APP_ID
{{- end }}

{{- if and (not .Values.redis.external.enabled) (not .Values.redis.subchart.enabled) }}

⚠️  WARNING: No Redis configuration detected. Please configure either external Redis or enable the Redis subchart.
{{- end }}
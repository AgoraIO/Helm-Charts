{{- if eq .Values.architecture "separated" }}

1. Access the API Server (port-forward)
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-api-server 8080:8080
   curl http://localhost:8080/health

2. Check health endpoints (per service)
   # API Server
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-api-server 8191:8191
   curl http://localhost:8191/health

   # Egress workers
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-egress 8192:8192
   curl http://localhost:8192/health

   # Flexible Recorder
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-flexible-recorder 8193:8193
   curl http://localhost:8193/health

   # Uploader
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-uploader 8194:8194
   curl http://localhost:8194/health

   # Webhook Notifier
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }}-webhook-notifier 8195:8195
   curl http://localhost:8195/health

3. Configuration quick refs
   - Agora App ID: {{ .Values.agora.appId }}
   {{- if .Values.redis.external.enabled }}
   - Redis: {{ .Values.redis.external.host }}:{{ .Values.redis.external.port }} (db {{ .Values.redis.external.database }})
   {{- end }}
   {{- if .Values.persistence.enabled }}
   - Recordings: {{ .Values.persistence.recordings.mountPath }}, Snapshots: {{ .Values.persistence.snapshots.mountPath }}
   {{- end }}

4. Monitoring
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "rtc-egress.name" . }}
   kubectl get hpa -n {{ .Release.Namespace }}
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=api-server -f

{{- else }}

1. Get the application URL
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "rtc-egress.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "rtc-egress.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.ports.api.port }}
{{- else }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }} 8080:{{ .Values.service.ports.api.port }}
  echo http://127.0.0.1:8080
{{- end }}

2. Check health
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "rtc-egress.fullname" . }} 8182:{{ .Values.service.ports.health.port }}
  curl http://localhost:8182/health

3. Monitoring
  kubectl get pods -n {{ .Release.Namespace }} -l {{ include "rtc-egress.selectorLabels" . }}
  kubectl logs -n {{ .Release.Namespace }} -l {{ include "rtc-egress.selectorLabels" . }} -f

{{- end }}

{{- if not .Values.agora.appId }}

⚠️  WARNING: You need to configure your Agora App ID in values.yaml or via --set agora.appId=YOUR_APP_ID
{{- end }}

{{- if and (not .Values.redis.external.enabled) (not .Values.redis.subchart.enabled) }}

⚠️  WARNING: No Redis configuration detected. Please configure either external Redis or enable the Redis subchart.
{{- end }}

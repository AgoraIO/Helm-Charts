# Default values for rtc-egress
# This file contains development/testing defaults and is automatically loaded by Helm
# For specific environments, use:
# - values.yaml (development/testing) - this file
# - values-production-separated.yaml (production separated architecture)
# - values-monolithic.yaml (monolithic single-container mode)

# Import development configuration as default
# This ensures 'helm install' works without specifying --values
architecture: "separated"

# Default configuration points to development settings
# For production, always use: --values values-production-separated.yaml
# For monolithic mode, use: --values values-monolithic.yaml

# Service account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# Container security context  
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# API Server Configuration - Development defaults
apiServer:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress/api-server
    tag: "latest"
    pullPolicy: Always
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8080
    healthPort: 8191
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false

# Egress Service Configuration - Development defaults
egress:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress/egress
    tag: "latest"
    pullPolicy: Always
  replicaCount: 3
  workers: 4
  redis:
    workerPatterns:
      - "egress:snapshot:*"       # Global snapshot tasks
      - "egress:record:*"         # Global recording tasks
      - "egress:*:snapshot:*"     # Regional snapshot tasks
      - "egress:*:record:*"       # Regional recording tasks
  service:
    type: ClusterIP
    healthPort: 8192
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    enabled: false

# Flexible Recorder Service Configuration - Development defaults
flexibleRecorder:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress/flexible-recorder
    tag: "latest"
    pullPolicy: Always
  replicaCount: 2
  workers: 1
  redis:
    workerPatterns:
      - "egress:web:*"          # Global web recording tasks
      - "egress:*:web:*"        # Regional web recording tasks
  service:
    type: ClusterIP
    healthPort: 8193
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  webRecorder:
    baseUrl: "http://localhost:8001"
    timeout: 30
  autoscaling:
    enabled: false

# Uploader Service Configuration - Development defaults
uploader:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress/uploader
    tag: "latest"
    pullPolicy: Always
  replicaCount: 1
  service:
    type: ClusterIP
    healthPort: 8194
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false
  # Ensure default relative watch paths exist in K8s/Docker
  webRecorder:
    createEmptyDir: true
    mountPath: "/web_recorder"

# Webhook Notifier Service Configuration - Development defaults
webhookNotifier:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/rtc-egress/webhook-notifier
    tag: "latest"
    pullPolicy: Always
  replicaCount: 2
  service:
    type: ClusterIP
    healthPort: 8195
  webhook:
    url: "http://localhost:9999/webhook"
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 150m
      memory: 256Mi
  autoscaling:
    enabled: false
  webhooks:
    enabled: true
    endpoints: []

# Development Redis Configuration
redis:
  external:
    enabled: true
    host: "localhost"
    port: 6379
    password: ""
    database: 0
  subchart:
    enabled: false

# Development Agora Configuration
agora:
  appId: "YOUR_AGORA_APP_ID"
  accessToken: ""
  channelName: "dev-test"
  egressUid: "42"

# Development persistence with smaller volumes
persistence:
  enabled: true
  recordings:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 100Gi
    mountPath: /recordings
  snapshots:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 50Gi
    mountPath: /snapshots
  logs:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: /var/log/rtc_egress

# S3 disabled for development
s3:
  enabled: false
  bucket: ""
  region: "us-west-2"
  accessKey: ""
  secretKey: ""
  endpoint: ""

# Development settings
pod:
  region: ""
  workers: 4

server:
  ginMode: "debug"
  apiPort: 8080
  healthPort: 8182
  logLevel: "debug"

# Config path defaults for all services (used to set CONFIG_DIR/CONFIG_FILE env)
config:
  dir: "/opt/rtc_egress/config"
  file: ""

# Monitoring disabled for development
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
  redis:
    enabled: false
  alerts:
    enabled: false

# Environment variables
env: []
envFrom: []

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Additional volumes and mounts
extraVolumes: []
extraVolumeMounts: []

# Init and sidecar containers
initContainers: []
sidecars: []

# Node selector, tolerations, affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Legacy configurations for backward compatibility
# These are used when architecture=monolithic
image:
  registry: ghcr.io
  repository: agoraio/rtc-egress
  tag: "latest"
  pullPolicy: Always

replicaCount: 3

service:
  type: ClusterIP
  ports:
    api:
      port: 8080
      targetPort: 8080
      protocol: TCP
    health:
      port: 8182
      targetPort: 8182
      protocol: TCP
    canvas:
      port: 3000
      targetPort: 3000
      protocol: TCP

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  redis:
    enabled: true
    queueName: "egress:record:*"
    targetQueueLength: "10"

# Legacy probe configurations
livenessProbe:
  httpGet:
    path: /health
    port: 8182
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8182
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: egress.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: rtc-egress
            port: 8080
  tls: []

# Recording and snapshot configurations
recording:
  outputDir: "/recordings"
  users: "9032"
  layout: "flat"
  format: "mp4"
  maxDurationSeconds: 86400
  video:
    enabled: true
    width: 1280
    height: 720
    fps: 30
    bitrate: 2000000
    codec: "libx264"
  audio:
    enabled: true
    sampleRate: 48000
    channels: 2
    bitrate: 128000
    codec: "aac"

snapshots:
  outputDir: "/snapshots"
  width: 1280
  height: 720
  users: "9032"
  layout: "flat"
  intervalInMs: 20000
  quality: 90

# Default values for rtc-egress
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Service account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Architecture mode: "monolithic" or "separated"
architecture: "separated"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# Container security context  
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# API Server Configuration (HTTP API - publishes tasks to Redis)
apiServer:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/api-server
    tag: "latest"
    pullPolicy: Always
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8080
    healthPort: 8181
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Egress Service Configuration (Native recording/snapshot with C++ workers)
egress:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/egress
    tag: "latest"
    pullPolicy: Always
  replicaCount: 3
  workers: 4
  service:
    type: ClusterIP
    healthPort: 8182
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    redis:
      enabled: true
      queueName: "egress:record:*"
      targetQueueLength: "10"

# Flexible Recorder Service Configuration (Web recording via web recorder engine)
flexibleRecorder:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/flexible-recorder
    tag: "latest"
    pullPolicy: Always
  replicaCount: 2
  workers: 1
  service:
    type: ClusterIP
    healthPort: 8183
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  webRecorder:
    baseUrl: "http://localhost:8001"
    timeout: 30
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    redis:
      enabled: false
      queueName: "egress:web:*"
      targetQueueLength: "5"

# Uploader Service Configuration (File upload to S3)
uploader:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/uploader
    tag: "latest"
    pullPolicy: Always
  replicaCount: 1
  service:
    type: ClusterIP
    healthPort: 8184
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Webhook Notifier Service Configuration (updated for new architecture)
webhookNotifier:
  enabled: true
  image:
    registry: ghcr.io
    repository: agoraio/webhook-notifier
    tag: "latest"
    pullPolicy: Always
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 150m
      memory: 256Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  webhooks:
    enabled: true
    endpoints: []

# Legacy monolithic service configuration (deprecated)
service:
  type: ClusterIP
  ports:
    api:
      port: 8080
      targetPort: 8080
      protocol: TCP
    health:
      port: 8182
      targetPort: 8182
      protocol: TCP
    canvas:
      port: 3000
      targetPort: 3000
      protocol: TCP

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: egress.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: rtc-egress
            port: 8080
  tls: []
    # - secretName: egress-tls
    #   hosts:
    #     - egress.local

# Legacy resources (deprecated - use individual service resources)
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Legacy autoscaling (deprecated - use individual service autoscaling)
autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  redis:
    enabled: true
    queueName: "egress:record:*"
    targetQueueLength: "10"

# Probes
livenessProbe:
  httpGet:
    path: /health
    port: 8182
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8182
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Persistent volumes
persistence:
  enabled: true
  recordings:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 100Gi
    mountPath: /recordings
  snapshots:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 50Gi
    mountPath: /snapshots
  logs:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: /var/log/rtc_egress

# Agora configuration
agora:
  appId: "YOUR_AGORA_APP_ID"
  # For production, use secrets instead of plain text
  accessToken: ""
  channelName: ""
  egressUid: "42"

# Redis configuration
redis:
  # Use external Redis
  external:
    enabled: true
    host: "redis-server"
    port: 6379
    password: ""
    database: 0
  
  # Use Redis subchart (for development)
  subchart:
    enabled: false

# Server configuration
server:
  ginMode: "release"
  apiPort: 8080
  healthPort: 8182
  canvasTemplatePort: 3000
  logLevel: "info"

# Pod configuration
pod:
  region: ""
  workers: 4

# Recording configuration
recording:
  outputDir: "/recordings"
  users: "9032"
  layout: "flat"
  format: "mp4"
  maxDurationSeconds: 86400
  video:
    enabled: true
    width: 1280
    height: 720
    fps: 30
    bitrate: 2000000
    codec: "libx264"
  audio:
    enabled: true
    sampleRate: 48000
    channels: 2
    bitrate: 128000
    codec: "aac"

# Snapshots configuration
snapshots:
  outputDir: "/snapshots"
  width: 1280
  height: 720
  users: "9032"
  layout: "flat"
  intervalInMs: 20000
  quality: 0

# S3 configuration (optional)
s3:
  enabled: false
  bucket: ""
  region: "us-west-2"
  accessKey: ""
  secretKey: ""
  endpoint: ""

# Environment variables
env: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"

# Additional environment variables from secrets/configmaps
envFrom: []
  # - secretRef:
  #     name: egress-secrets
  # - configMapRef:
  #     name: egress-config

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Additional volumes
extraVolumes: []

# Additional volume mounts
extraVolumeMounts: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: []


# Monitoring Configuration  
monitoring:
  enabled: true
  # System + Performance metrics (automatic)
  serviceMonitor:
    enabled: true
    interval: 30s
    # Automatically scrapes:
    # - HTTP request latency (from Gin framework)
    # - HTTP error rates (4xx, 5xx responses) 
    # - Request throughput (requests per second)
    # - System metrics (CPU, memory, disk, network)
  
  # Redis metrics for queue-based scaling
  redis:
    enabled: true
    exporter:
      image: "oliver006/redis_exporter:v1.45.0"
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
  
  # Performance thresholds for alerting
  alerts:
    enabled: true
    thresholds:
      # Request performance
      latency:
        p95: 2000ms     # Alert if 95th percentile > 2s
        p99: 5000ms     # Alert if 99th percentile > 5s
      errorRate:
        threshold: 5    # Alert if error rate > 5%
      throughput:
        min: 10         # Alert if RPS < 10 (indicates problems)
      # System performance  
      cpu:
        threshold: 80   # Alert if CPU > 80%
      memory:
        threshold: 85   # Alert if memory > 85%
      # Redis performance
      redisQueue:
        maxLength: 100  # Alert if queue > 100 tasks
        maxWaitTime: 60 # Alert if tasks wait > 60s

